From 7ec8faf3ab91ab2214bb61e3c58688c6d0be12db Mon Sep 17 00:00:00 2001
From: John Sullivan <jack.t.sullivan@oracle.com>
Date: Wed, 25 Aug 2021 15:24:04 -0400
Subject: [PATCH] added test for roundtripping objects that are both
 `Configurable` and `Provenancable` through provenance and back to check
 whether the produce the same object. Wrote a `structuralEquals` method on
 `ConfigurationData` to support it.

---
 .../test/java/org/tribuo/test/Helpers.java    | 23 +++++++++-
 .../response/BinaryResponseProcessor.java     |  2 +
 .../response/FieldResponseProcessor.java      |  1 +
 .../ResponseProcessorRoundtripTest.java       | 43 +++++++++++++++++++
 pom.xml                                       |  2 +-
 5 files changed, 69 insertions(+), 2 deletions(-)
 create mode 100644 Data/src/test/java/org/tribuo/data/columnar/processors/response/ResponseProcessorRoundtripTest.java

diff --git a/Core/src/test/java/org/tribuo/test/Helpers.java b/Core/src/test/java/org/tribuo/test/Helpers.java
index cd3f3cd..ac739a6 100644
--- a/Core/src/test/java/org/tribuo/test/Helpers.java
+++ b/Core/src/test/java/org/tribuo/test/Helpers.java
@@ -16,7 +16,11 @@
 
 package org.tribuo.test;
 
+import com.oracle.labs.mlrg.olcut.config.Configurable;
+import com.oracle.labs.mlrg.olcut.config.ConfigurationData;
+import com.oracle.labs.mlrg.olcut.config.ConfigurationManager;
 import com.oracle.labs.mlrg.olcut.provenance.ObjectProvenance;
+import com.oracle.labs.mlrg.olcut.provenance.Provenancable;
 import com.oracle.labs.mlrg.olcut.provenance.ProvenanceUtil;
 import com.oracle.labs.mlrg.olcut.provenance.io.ObjectMarshalledProvenance;
 import org.junit.jupiter.api.Assertions;
@@ -27,7 +31,6 @@ import org.tribuo.Model;
 import org.tribuo.MutableFeatureMap;
 import org.tribuo.Output;
 import org.tribuo.impl.ListExample;
-import org.tribuo.provenance.ModelProvenance;
 import org.tribuo.sequence.SequenceModel;
 
 import java.io.BufferedInputStream;
@@ -40,7 +43,9 @@ import java.io.ObjectOutputStream;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import java.util.logging.Logger;
+import java.util.stream.Collectors;
 
 /**
  * Test helpers
@@ -76,6 +81,22 @@ public final class Helpers {
         return ex;
     }
 
+
+    public static <P extends ObjectProvenance, C extends Configurable & Provenancable<P>> void testConfigurableRoundtrip(C itm) {
+        ConfigurationManager cm = new ConfigurationManager();
+        String name = cm.importConfigurable(itm, "item");
+        List<ConfigurationData> configData = cm.getComponentNames().stream()
+                .map(cm::getConfigurationData)
+                .filter(Optional::isPresent)
+                .map(Optional::get)
+                .collect(Collectors.toList());
+
+        List<ConfigurationData> provenData = ProvenanceUtil.extractConfiguration(itm.getProvenance());
+
+        Assertions.assertTrue(ConfigurationData.structuralEquals(configData, provenData, name, provenData.get(0).getName()));
+    }
+
+
     public static void testProvenanceMarshalling(ObjectProvenance inputProvenance) {
         List<ObjectMarshalledProvenance> provenanceList = ProvenanceUtil.marshalProvenance(inputProvenance);
         ObjectProvenance unmarshalledProvenance = ProvenanceUtil.unmarshalProvenance(provenanceList);
diff --git a/Data/src/main/java/org/tribuo/data/columnar/processors/response/BinaryResponseProcessor.java b/Data/src/main/java/org/tribuo/data/columnar/processors/response/BinaryResponseProcessor.java
index 62cff6e..4d56b99 100644
--- a/Data/src/main/java/org/tribuo/data/columnar/processors/response/BinaryResponseProcessor.java
+++ b/Data/src/main/java/org/tribuo/data/columnar/processors/response/BinaryResponseProcessor.java
@@ -86,8 +86,10 @@ public class BinaryResponseProcessor<T extends Output<T>> implements ResponsePro
                 throw new PropertyException(configName, "positiveResponses", "if fieldName is populated, positiveResponses must be blank");
             }
             fieldNames = Collections.singletonList(fieldName);
+            fieldName = null;
             if(positiveResponse != null) {
                 positiveResponses = Collections.singletonList(positiveResponse);
+                positiveResponse = null;
             } else {
                 throw new PropertyException(configName, "positiveResponse", "if fieldName is populated positiveResponse must be populated");
             }
diff --git a/Data/src/main/java/org/tribuo/data/columnar/processors/response/FieldResponseProcessor.java b/Data/src/main/java/org/tribuo/data/columnar/processors/response/FieldResponseProcessor.java
index 6d3e153..f7d9dcf 100644
--- a/Data/src/main/java/org/tribuo/data/columnar/processors/response/FieldResponseProcessor.java
+++ b/Data/src/main/java/org/tribuo/data/columnar/processors/response/FieldResponseProcessor.java
@@ -78,6 +78,7 @@ public class FieldResponseProcessor<T extends Output<T>> implements ResponseProc
                 throw new PropertyException(configName, "defaultValues", "if fieldName is populated, defaultValues must be blank");
             }
             fieldNames = Collections.singletonList(fieldName);
+            fieldName = null;
             if (defaultValue != null) {
                 defaultValues = Collections.singletonList(defaultValue);
             } else {
diff --git a/Data/src/test/java/org/tribuo/data/columnar/processors/response/ResponseProcessorRoundtripTest.java b/Data/src/test/java/org/tribuo/data/columnar/processors/response/ResponseProcessorRoundtripTest.java
new file mode 100644
index 0000000..e5f68e4
--- /dev/null
+++ b/Data/src/test/java/org/tribuo/data/columnar/processors/response/ResponseProcessorRoundtripTest.java
@@ -0,0 +1,43 @@
+package org.tribuo.data.columnar.processors.response;
+
+import org.junit.jupiter.api.Test;
+import org.tribuo.test.Helpers;
+import org.tribuo.test.MockMultiOutput;
+import org.tribuo.test.MockMultiOutputFactory;
+import org.tribuo.test.MockOutput;
+import org.tribuo.test.MockOutputFactory;
+
+import java.util.Arrays;
+
+public class ResponseProcessorRoundtripTest {
+
+    @Test
+    public void binaryTest() throws NoSuchFieldException, IllegalAccessException {
+        BinaryResponseProcessor<MockMultiOutput> multiRespProc = new BinaryResponseProcessor<>(
+                Arrays.asList("R1", "R2"),
+                Arrays.asList("TRUE", "TRUE"),
+                new MockMultiOutputFactory(),
+                "true", "false", true);
+
+        Helpers.testConfigurableRoundtrip(multiRespProc);
+
+        BinaryResponseProcessor<MockOutput> singleRespProc = new BinaryResponseProcessor<>("R1", "TRUE", new MockOutputFactory());
+
+        Helpers.testConfigurableRoundtrip(singleRespProc);
+    }
+
+    @Test
+    public void fieldTest() {
+        FieldResponseProcessor<MockMultiOutput> multiRespProc = new FieldResponseProcessor<>(
+                Arrays.asList("R1", "R2"),
+                Arrays.asList("A", "B"),
+                new MockMultiOutputFactory(),
+                true, false);
+
+        Helpers.testConfigurableRoundtrip(multiRespProc);
+
+        FieldResponseProcessor<MockOutput> singleRespProc = new FieldResponseProcessor<>("R1", "A", new MockOutputFactory());
+
+        Helpers.testConfigurableRoundtrip(singleRespProc);
+    }
+}
diff --git a/pom.xml b/pom.xml
index 298939b..4fe78cc 100644
--- a/pom.xml
+++ b/pom.xml
@@ -42,7 +42,7 @@
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
 
         <!-- MLRG dependencies -->
-        <olcut.version>5.1.6</olcut.version>
+        <olcut.version>5.2.1-SNAPSHOT</olcut.version>
 
         <!-- 3rd party backend dependencies -->
         <liblinear.version>2.43</liblinear.version>
-- 
2.29.3

